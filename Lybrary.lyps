>>> ;; Shorthand defun! local
... ;;
... ;; (defun! '(<name> <arg1> <arg2> ...)
... ;;         '<expr>)
... (def!! 'defun! (lam '(nameAndArgs expr)
...                     '(def!  (first nameAndArgs)
...                             (lam (rest nameAndArgs)
...                                  expr))))
... 
>>> ;; Shorthand defun!! global
... ;;
... ;; (defun!! '(<name> <arg1> <arg2> ...)
... ;;          '<expr>)
... (def!! 'defun!! (lam '(nameAndArgs expr)
...                      '(def!! (first nameAndArgs)
...                              (lam (rest nameAndArgs)
...                                   expr))))
... 
>>> ;; (do <list> <fn>)
... ;;(defun!! '(do aList aFn)
... ;;         '(if (isNull? aList)
... ;;             '()
... ;;             '(block
... ;;                '(
... ;;                 (eval (list aFn (first aList)))
... ;;                 (do (rest aList) aFn)
... ;;                 ))))
... ;; Apply a function to each element of a list.  Return a new list of the results.
... ;;
... ;; (apply 'fn '(...))
... ;; (defun!! '(apply aFn aList)
... ;;          '(if (isNull? aList)
... ;;              '( )
... ;;              '(cons (eval (list aFn (first aList)))
... ;;                     (apply aFn (rest aList)))))
... ;; Prompt the user for input on the command line.
... ;;
... (defun!! '(read_prompt promptStr)
...         '(block
...             '( (write! promptStr)
...                (readLn!)          )))
... 
>>> (defun!! '(isEven? intVal)
...          '(= (mod intVal 2) 0))
... 
>>> (defun!! '(isOdd? intVal)
...          '(= (mod intVal 2) 1))
... 
>>> ;; List - remove a symbol from a list - destructive
... ;;
... ;; (remove '<symbol> '<list>)
... (defun!! '(remove sym lst)
...          '(cond '( ((isNull? lst)        null)
...                    ((= sym (first lst))                    (rest lst))
...                    (1                    (cons (first lst) (remove sym (rest lst)))))))
... 
>>> ;; List - compute the length of the list
... ;;
... ;; (size '<list>)
... (defun!! '(size lst)
...          '(if (isNull? lst)
...               0
...              '(+ 1 (size (rest lst)))))
...
>>> ;; List - reverse the order of the top level elements
... ;;
... ;; (reverse '<list>)
... (defun!! '(reverse lst)
...          '(reverse-aux '() lst))
... 
>>> (defun!! '(reverse-aux destLst srcLst)
...          '(if (isNull? srcLst)
...              'destLst
...              '(reverse-aux (cons (first srcLst) destLst) (rest srcLst))))
... 
>>> ;; List - make a copy of the argument list
... ;;
... ;; (copy <list>)
... (defun!! '(copy lst)
...          '(reverse (reverse lst)))
... 
>>> ;; List - make a deepCopy fo the argument list
... ;;
... ;; (deepCopy <list>)
... 
... (defun!! '(deepCopy expr)
...          '(cond '( ((isNull?   expr)  '( ))
...                    ((isAtom?   expr)  expr)
...                    ((isString? expr)  expr)
...                    ((isList?   expr)  (cons (deepcopy (first expr))
...                                             (deepcopy (rest  expr)))) )))
... 
>>> ;; List - concatenate two lists
... ;;
... ;; (concat '<list-1> '<list-2>)
... (defun!! '(concat lst1 lst2)
...          '(concat-aux (reverse lst1) (copy lst2)))
... 
>>> (defun!! '(concat-aux srcLst dstLst)
...          '(if (isNull? srcLst)
...              'dstLst
...              '(concat-aux (rest srcLst) (cons (first srcLst) dstLst))))
... 
>>> ;; (dig aTree aPath)
... ;;
... ;; Given a nested structure of lists and maps, this function will execute
... ;; a depth-first traversal down aPath - a list of map keys and list inidies.
... ;; returns the object in that location.
... (defun!! '(dig aTree aPath)
...          '(if (isNull? aPath)
...               'aTree
...               '(dig (at aTree (first aPath)) (rest aPath)) ))
... 
>>> ;; Compare two lists for deep equality - deep comparison
... ;;
... ;; (equal? '<expr-1> '<expr-2>)
... (defun!! '(equal? expr1 expr2)
...          '(cond '( ((or (isAtom? expr1)    
...                         (isNull? expr1))
...                                  (= expr1 expr2))
...                    ((and (isList? expr1)
...                          (isList? expr2))
...                                  (and (isList? expr2)
...                                       (and (equal? (first expr1) (first expr2))
...                                            (equal? (rest expr1) (rest expr2)))))
...                    (1
...                                  null))))
... 
>>> ;; Compute the factorial
... ;;
... ;; (fact n)
... (defun!! '(fact n)
...          '(if (= n 0)
...               1
...              '(* n (fact (- n 1)))))
... 
>>> ;; Compute the Fibbonacci number
... ;;
... ;; (fib n)
... (defun!! '(fib n)
...          '(if (< n 2)
...               1
...              '(+ (fib (- n 1))
...                  (fib (- n 2)))))
... 
>>> (defun!! '(isoDate)
...          '(format "{0:04}-{1:02}-{2:02}T{3:02}:{4:02}:{5:02}.{6}" (when)))
... 
>>> (def!! 'fmi '( (IMPLIES P   Q     ) P   ))
... 
>>> (def!! 'exi '( (IMPLIES (DOG BOO) (MAMMAL BOO)) (FISH BOO) (DOG BOO)))
... 
>>> (def!! 'conseq2 '(conseq ( (IMPLIES P Q) P )
...                          ( Q ) ))
... 
>>> (def!! 'fm '( (OR P Q) (IMPLIES P R) (IMPLIES Q R) ))
... 
>>> (def!! 'ex '( (OR X Y) (OR A B) (IMPLIES B Z) (IMPLIES A Z) ))
... 
>>> (def!! 'conseq1 '(conseq ( (OR P Q) (IMPLIES P R) (IMPLIES Q R) )
...                          ( R )
...                          )
...        )       
... 
>>> (defun!! '(d expr)
...          '(cond '( ((isNumber? expr)
...                       0)
...                    ((isSymbol? expr)
...                       1)
...                    ((isList? expr)
...                       (case '(first expr)
...                             '( ('+        (list '+   (d (at expr 1)) (d (at expr 2))))
...                                ('*        (list '+   (list '* (at expr 2) (d (at expr 1))) (list '* (at expr 1) (d (at expr 2)))))
...                                ('sin      (list 'cos (at expr 1)))
...                                ('cos      (list 'neg (list 'sin (at expr 1))))
...                                ('pow      (list '*   (list '* (at expr 2) (list 'pow (at expr 1) (- (at expr 2) 1))) (d (at expr 1))))
...                             ))))))
... 
;>>> (defun!! '(hasContradiction? exprList)
;...          '(...))
;... 
>>> ;; P                     Append P (expr)
... ;; (NOT a)
... ;;      P                Append (NOT P) (expr)
... ;;      (NOT a)          Append a
... ;;      (AND a b)        Append (OR (NOT a) (NOT b))
... ;;      (OR a b)         Append (AND (NOT a) (NOT b))
... ;;      (IMPLIES a b)    Append (AND a (NOT b))
... ;;
... ;; (AND a b)             Append a; Append b
... ;; (OR a b)              branch Append a; branch Append b
... ;; (IMPLIES a b)         branch Append (NOT a); branch Append b
... (defun!! '(semantic exprList)
...          '(if (hasContradiction? exprList)
...               (list 1 1 '<CLOSED> exprList)
...               (block '(
...                      (def! 'branch '())
...                      (forEach expr exprList
...                          '(
...                          (if (isAtom? expr)
...                              (push! branch -1 expr)
...                              (if (= (first expr) 'not)
...                                  (if (isSymbol? (at expr 2))
...                                      (push! branch -1 expr))
...                                      (cond '( ((= (first (first expr)) 'NOT)    (push! branch -1 (at expr 2))
...                                               ((= (first (first expr)) 'AND)    (push! branch -1 
...                          ))
...                      ))
... 